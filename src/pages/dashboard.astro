---
// src/pages/dashboard.astro
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";

const pageTitle = "Bitcoin Treasury Dashboard";
---

<Layout title={pageTitle}>
  <Header activeNav="dashboard" />
  <main id="main-content">
    <!-- Your existing HTML content remains the same -->
    <section class="dashboard-container">
      <div class="dashboard-header">
        <h1>Bitcoin Treasury & Lightning Dashboard</h1>
        <p class="last-updated">Last updated: <span id="last-update"></span></p>
        <button class="refresh-btn" id="refresh-btn">üîÑ Refresh Data</button>
      </div>

      <!-- Treasury Overview -->
      <div class="card-grid">
        <div class="card treasury-card">
          <h2>üè¶ Treasury Overview</h2>
          <div class="metric-row">
            <div class="metric">
              <span class="metric-label">Total BTC Holdings</span>
              <span class="metric-value" id="total-btc">21.5000</span>
              <span class="metric-unit">BTC</span>
            </div>
            <div class="metric">
              <span class="metric-label">USD Value</span>
              <span class="metric-value" id="usd-value">$945,000</span>
            </div>
          </div>
          <div class="metric-row">
            <div class="metric">
              <span class="metric-label">MYR Value</span>
              <span class="metric-value" id="myr-value">RM 4,200,000</span>
            </div>
            <div class="metric">
              <span class="metric-label">Unrealized P&L</span>
              <span class="metric-value profit" id="unrealized-pnl">+$188,200</span>
            </div>
          </div>
        </div>

        <!-- Lightning Node Stats -->
        <div class="card lightning-card">
          <h2>‚ö° Lightning Node</h2>
          <div class="node-status">
            <span class="status-indicator online"></span>
            <span>Node Online</span>
          </div>
          <div class="metric-row">
            <div class="metric">
              <span class="metric-label">Channels</span>
              <span class="metric-value" id="channels">24</span>
            </div>
            <div class="metric">
              <span class="metric-label">Capacity</span>
              <span class="metric-value" id="capacity">5.2500</span>
              <span class="metric-unit">BTC</span>
            </div>
          </div>
          <div class="metric-row">
            <div class="metric">
              <span class="metric-label">Local Balance</span>
              <span class="metric-value" id="local-balance">2.8500</span>
              <span class="metric-unit">BTC</span>
            </div>
            <div class="metric">
              <span class="metric-label">Remote Balance</span>
              <span class="metric-value" id="remote-balance">2.4000</span>
              <span class="metric-unit">BTC</span>
            </div>
          </div>
        </div>

        <!-- Price & Market -->
        <div class="card price-card">
          <h2>üìà Market Data</h2>
          <div class="metric-row">
            <div class="metric">
              <span class="metric-label">BTC Price (USD)</span>
              <span class="metric-value" id="btc-price-usd">$43,950</span>
            </div>
            <div class="metric">
              <span class="metric-label">BTC Price (MYR)</span>
              <span class="metric-value" id="btc-price-myr">RM 195,500</span>
            </div>
          </div>
          <div class="metric-row">
            <div class="metric">
              <span class="metric-label">24h Change</span>
              <span class="metric-value profit" id="price-change">+2.4%</span>
            </div>
            <div class="metric">
              <span class="metric-label">Market Cap</span>
              <span class="metric-value" id="market-cap">$861B</span>
            </div>
          </div>
        </div>

        <!-- Recent Activity -->
        <div class="card activity-card">  
          <h3>‚ö° Lightning Metrics</h3>
          <div class="mini-metrics">
            <div class="mini-metric">
              <span class="mini-label">Routing Revenue (30d)</span>
              <span class="mini-value">125,000 sats</span>
            </div>
            <div class="mini-metric">
              <span class="mini-label">Successful Routes</span>
              <span class="mini-value">1,247</span>
            </div>
            <div class="mini-metric">
              <span class="mini-label">Avg Route Size</span>
              <span class="mini-value">50,000 sats</span>
            </div>
          </div>
        </div>

        <!-- Market Sentiment -->
        <div class="card activity-card">
          <div class="sentiment-info">
              <div class="mini-metric">
                <span class="mini-label">Fear & Greed Index</span>
                <span class="mini-value" id="fear-greed-value">72 (Greed)</span>
              </div>
              <div class="sentiment-bar">
                <div class="sentiment-fill" id="sentiment-fill" style="left: 72%"></div>
              </div>
              <div class="sentiment-labels">
                <span>Fear</span>
                <span>Greed</span>
              </div>
            </div>
        </div>

        <!-- Recent Activity -->
        <div class="card activity-card">
          <h2>üìä Recent Activity</h2>
          <div class="activity-list">
            <div class="activity-item">
              <span class="activity-type buy">BUY</span>
              <span class="activity-amount">0.5000 BTC</span>
              <span class="activity-date">2 days ago</span>
            </div>
            <div class="activity-item">
              <span class="activity-type channel">CHANNEL</span>
              <span class="activity-amount">Opened 1M sats</span>
              <span class="activity-date">5 days ago</span>
            </div>
            <div class="activity-item">
              <span class="activity-type routing">ROUTING</span>
              <span class="activity-amount">+2,500 sats</span>
              <span class="activity-date">1 week ago</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Holdings Breakdown -->
      <div class="holdings-section">
        <h2>Bitcoin Holdings Breakdown</h2>
        <div class="holdings-grid">
          <div class="holding-item">
            <div class="holding-header">
              <h3>Cold Storage</h3>
              <span class="holding-percentage">75%</span>
            </div>
            <div class="holding-amount">16.1250 BTC</div>
            <div class="holding-values">
              <div class="holding-usd" id="cold-storage-usd">$708,750</div>
              <div class="holding-myr" id="cold-storage-myr">RM 3,150,000</div>
            </div>
            <div class="holding-bar">
              <div class="holding-fill" style="width: 75%"></div>
            </div>
          </div>
          <div class="holding-item">
            <div class="holding-header">
              <h3>Lightning Channels</h3>
              <span class="holding-percentage">24%</span>
            </div>
            <div class="holding-amount">5.2500 BTC</div>
            <div class="holding-values">
              <div class="holding-usd" id="lightning-usd">$230,737</div>
              <div class="holding-myr" id="lightning-myr">RM 1,026,000</div>
            </div>
            <div class="holding-bar">
              <div class="holding-fill" style="width: 24%"></div>
            </div>
          </div>
          <div class="holding-item">
            <div class="holding-header">
              <h3>Hot Wallet</h3>
              <span class="holding-percentage">1%</span>
            </div>
            <div class="holding-amount">0.1250 BTC</div>
            <div class="holding-values">
              <div class="holding-usd" id="hot-wallet-usd">$5,493</div>
              <div class="holding-myr" id="hot-wallet-myr">RM 24,400</div>
            </div>
            <div class="holding-bar">
              <div class="holding-fill" style="width: 1%"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Additional Metrics Section -->
      <div class="metrics-grid">
        <div class="metric-card">
          <h3>üîí Security Status</h3>
          <div class="security-items">
            <div class="security-item">
              <span class="security-icon">‚úÖ</span>
              <span>Hardware Wallet Connected</span>
            </div>
            <div class="security-item">
              <span class="security-icon">‚úÖ</span>
              <span>Multi-sig Setup Active</span>
            </div>
            <div class="security-item">
              <span class="security-icon">‚úÖ</span>
              <span>Backup Verified</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Exchange Rates -->
      <div class="exchange-section">
        <h2>üè™ Exchange Rates</h2>
        <div class="exchange-grid" id="exchange-rates">
          <div class="exchange-item">
            <span class="exchange-name">Coinbase Pro</span>
            <div class="exchange-prices">
              <span class="exchange-price-usd">$43,945</span>
              <span class="exchange-price-myr">RM 195,400</span>
            </div>
          </div>
          <div class="exchange-item">
            <span class="exchange-name">Binance</span>
            <div class="exchange-prices">
              <span class="exchange-price-usd">$43,952</span>
              <span class="exchange-price-myr">RM 195,430</span>
            </div>
          </div>
          <div class="exchange-item">
            <span class="exchange-name">Kraken</span>
            <div class="exchange-prices">
              <span class="exchange-price-usd">$43,948</span>
              <span class="exchange-price-myr">RM 195,415</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Currency Info -->
      <div class="currency-section">
        <h2>üí± Currency Information</h2>
        <div class="currency-grid">
          <div class="currency-item">
            <span class="currency-label">USD/MYR Rate</span>
            <span class="currency-value" id="usd-myr-rate">4.45</span>
          </div>
          <div class="currency-item">
            <span class="currency-label">Last Updated</span>
            <span class="currency-value" id="fx-last-update">Just now</span>
          </div>
        </div>
      </div>

      <!-- Alerts Section -->
      <div class="alerts-section">
        <h2>üö® Alerts & Notifications</h2>
        <div class="alerts-container" id="alerts-container">
          <div class="alert alert-info">
            <span class="alert-icon">‚ÑπÔ∏è</span>
            <div class="alert-content">
              <strong>Channel Rebalancing</strong>
              <p>Channel with ACINQ needs rebalancing - 85% remote</p>
            </div>
            <span class="alert-time">2h ago</span>
          </div>
          <div class="alert alert-success">
            <span class="alert-icon">‚úÖ</span>
            <div class="alert-content">
              <strong>DCA Purchase Complete</strong>
              <p>Successfully purchased 0.025 BTC at $43,200</p>
            </div>
            <span class="alert-time">1d ago</span>
          </div>
        </div>
      </div>
    </section>
  </main>
  <Footer />
</Layout>

<!-- Your existing styles remain the same -->
<style>
  /* All your existing CSS styles remain exactly the same */
  /* Root variables for consistent theming */
  :root {
    --dashboard-bg: #f8fafc;
    --card-bg: #ffffff;
    --card-border: #e2e8f0;
    --text-primary: #1a202c;
    --text-secondary: #4a5568;
    --text-muted: #718096;
    --accent-color: #f7931a;
    --success-color: #10b981;
    --error-color: #ef4444;
    --warning-color: #f59e0b;
    --info-color: #3b82f6;
    --fill-color: #f1f5f9;
  }

  /* Dark mode variables */
  @media (prefers-color-scheme: dark) {
    :root {
      --dashboard-bg: #0f172a;
      --card-bg: #1e293b;
      --card-border: #334155;
      --text-primary: #f1f5f9;
      --text-secondary: #cbd5e1;
      --text-muted: #94a3b8;
      --fill-color: #334155;
    }
  }

  /* Base styles */
  .dashboard-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
    background-color: var(--dashboard-bg);
    min-height: 100vh;
  }

  .dashboard-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .dashboard-header h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
    background: linear-gradient(135deg, #f7931a, #ff6b35);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .last-updated {
    color: var(--text-muted);
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }

  .refresh-btn {
    background: var(--accent-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.9rem;
  }

  .refresh-btn:hover {
    background: #e6830f;
    transform: translateY(-1px);
  }

  .refresh-btn:active {
    transform: translateY(0);
  }

  .refresh-btn.refreshing {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .refresh-btn.refreshing::before {
    content: '‚ü≥ ';
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .card {
    background: var(--card-bg);
    border: 1px solid var(--card-border);
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
  }

  .card h2 {
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
    color: var(--accent-color);
    font-weight: 600;
  }

  .metric-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
  }

  .metric {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    flex: 1;
  }

  .metric-label {
    font-size: 0.8rem;
    color: var(--text-muted);
    margin-bottom: 0.25rem;
    font-weight: 500;
  }

  .metric-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--text-primary);
    transition: color 0.3s ease;
  }

  .metric-unit {
    font-size: 0.9rem;
    color: var(--text-muted);
    margin-top: 0.25rem;
  }

  .profit {
    color: var(--success-color) !important;
  }

  .loss {
    color: var(--error-color) !important;
  }

  .price-up {
    color: var(--success-color) !important;
    animation: flash-green 1s ease-out;
  }

  .price-down {
    color: var(--error-color) !important;
    animation: flash-red 1s ease-out;
  }

  @keyframes flash-green {
    0% { background-color: rgba(16, 185, 129, 0.3); }
    100% { background-color: transparent; }
  }

  @keyframes flash-red {
    0% { background-color: rgba(239, 68, 68, 0.3); }
    100% { background-color: transparent; }
  }

  .node-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
    color: var(--text-secondary);
  }

  .status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .status-indicator.online {
    background-color: var(--success-color);
    box-shadow: 0 0 8px rgba(16, 185, 129, 0.5);
  }

  .activity-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .activity-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background: var(--fill-color);
    border-radius: 6px;
  }

  .activity-type {
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: bold;
    text-transform: uppercase;
  }

  .activity-type.buy {
    background-color: var(--success-color);
    color: white;
  }

  .activity-type.channel {
    background-color: var(--info-color);
    color: white;
  }

  .activity-type.routing {
    background-color: var(--warning-color);
    color: white;
  }

  .activity-amount {
    font-weight: bold;
    color: var(--text-primary);
  }

  .activity-date {
    font-size: 0.8rem;
    color: var(--text-muted);
  }

  .holdings-section {
    margin-bottom: 2rem;
  }

  .holdings-section h2 {
    margin-bottom: 1rem;
    color: var(--accent-color);
    font-weight: 600;
  }

  .holdings-grid {
    display: grid;
    gap: 1rem;
  }

  .holding-item {
    background: var(--card-bg);
    border: 1px solid var(--card-border);
    border-radius: 8px;
    padding: 1rem;
  }

  .holding-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }

  .holding-header h3 {
    margin: 0;
    font-size: 1rem;
    color: var(--text-primary);
    font-weight: 600;
  }

  .holding-percentage {
    font-weight: bold;
    color: var(--accent-color);
  }

  .holding-amount {
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
  }

  .holding-values {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    margin-bottom: 0.5rem;
  }

  .holding-usd {
    font-size: 0.9rem;
    color: var(--text-muted);
  }

  .holding-myr {
    font-size: 0.85rem;
    color: var(--text-muted);
    font-style: italic;
  }

  .holding-bar {
    width: 100%;
    height: 8px;
    background-color: var(--fill-color);
    border-radius: 4px;
    overflow: hidden;
  }

  .holding-fill {
    height: 100%;
    background: linear-gradient(90deg, #f7931a, #ff6b35);
    transition: width 0.3s ease;
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .metric-card {
    background: var(--card-bg);
    border: 1px solid var(--card-border);
    border-radius: 8px;
    padding: 1rem;
  }

  .metric-card h3 {
    margin: 0 0 1rem 0;
    font-size: 1rem;
    color: var(--accent-color);
    font-weight: 600;
  }

  .mini-metrics {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .mini-metric {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .mini-label {
    font-size: 0.8rem;
    color: var(--text-muted);
  }

  .mini-value {
    font-weight: bold;
    color: var(--text-primary);
  }

  .security-items {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .security-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  .sentiment-info {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .sentiment-bar {
    width: 100%;
    height: 8px;
    background: linear-gradient(90deg, #ef4444, #f59e0b, #10b981);
    border-radius: 4px;
    margin: 0.5rem 0;
    position: relative;
  }

  .sentiment-fill {
    position: absolute;
    top: -2px;
    width: 4px;
    height: 12px;
    background: var(--text-primary);
    border: 2px solid var(--card-bg);
    border-radius: 2px;
    transition: left 0.3s ease;
  }

  .sentiment-labels {
    display: flex;
    justify-content: space-between;
    font-size: 0.7rem;
    color: var(--text-muted);
  }

  .exchange-section {
    margin-bottom: 2rem;
  }

  .exchange-section h2 {
    margin-bottom: 1rem;
    color: var(--accent-color);
    font-weight: 600;
  }

  .exchange-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .exchange-item {
    background: var(--card-bg);
    border: 1px solid var(--card-border);
    border-radius: 8px;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .exchange-name {
    font-weight: bold;
    color: var(--text-primary);
  }

  .exchange-prices {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
  }

  .exchange-price-usd {
    color: var(--accent-color);
    font-weight: bold;
    font-size: 0.95rem;
  }

  .exchange-price-myr {
    color: var(--text-muted);
    font-size: 0.8rem;
    font-style: italic;
  }

  .currency-section {
    margin-bottom: 2rem;
  }

  .currency-section h2 {
    margin-bottom: 1rem;
    color: var(--accent-color);
    font-weight: 600;
  }

  .currency-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .currency-item {
    background: var(--card-bg);
    border: 1px solid var(--card-border);
    border-radius: 8px;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .currency-label {
    font-weight: bold;
    color: var(--text-primary);
  }

  .currency-value {
    color: var(--accent-color);
    font-weight: bold;
  }

  .alerts-section {
    margin-bottom: 2rem;
  }

  .alerts-section h2 {
    margin-bottom: 1rem;
    color: var(--accent-color);
    font-weight: 600;
  }

  .alerts-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .alert {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid;
    background: var(--card-bg);
  }

  .alert-info {
    border-left-color: var(--info-color);
  }

  .alert-success {
    border-left-color: var(--success-color);
  }

  .alert-content {
    flex: 1;
  }

  .alert-content strong {
    display: block;
    margin-bottom: 0.25rem;
    color: var(--text-primary);
  }

  .alert-content p {
    margin: 0;
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  .alert-time {
    font-size: 0.8rem;
    color: var(--text-muted);
    white-space: nowrap;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .card-grid {
      grid-template-columns: 1fr;
    }
    
    .metric-row {
      flex-direction: column;
      gap: 1rem;
    }
    
    .dashboard-header h1 {
      font-size: 2rem;
    }

    .metrics-grid {
      grid-template-columns: 1fr;
    }

    .exchange-grid {
      grid-template-columns: 1fr;
    }

    .currency-grid {
      grid-template-columns: 1fr;
    }
  }

  /* Dark mode specific adjustments */
  @media (prefers-color-scheme: dark) {
    .card {
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    }

    .card:hover {
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.4);
    }

    .sentiment-fill {
      background: var(--card-bg);
      border-color: var(--text-primary);
    }
  }

  /* Accessibility improvements */
  @media (prefers-reduced-motion: reduce) {
    .price-up,
    .price-down {
      animation: none !important;
    }
    
    .holding-fill {
      transition: none !important;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .card {
      border-width: 2px;
    }
    
    .metric-value {
      font-weight: 900 !important;
    }
  }
</style>

<script>
  // API Configuration
  const API_CONFIG = {
    coingecko: 'https://api.coingecko.com/api/v3',
    feargreed: 'https://api.alternative.me/fng/',
    binance: 'https://api.binance.com/api/v3',
    exchangerate: 'https://api.exchangerate-api.com/v4/latest/USD'
  };

  // Portfolio Configuration
  const PORTFOLIO = {
    totalBTC: 21.5000,
    avgCostBasis: 35200,
    holdings: {
      coldStorage: 16.1250,
      lightning: 5.2500,
      hotWallet: 0.1250
    }
  };

  let currentPriceUSD = 0;
  let currentPriceMYR = 0;
  let usdMyrRate = 4.45;
  let isRefreshing = false;

  // Type-safe element getter
  function getElement(id: string): HTMLElement | null {
    return document.getElementById(id);
  }

  // Type-safe element getter with assertion
  function getElementSafe(id: string): HTMLElement {
    const element = document.getElementById(id);
    if (!element) {
      throw new Error(`Element with id '${id}' not found`);
    }
    return element;
  }

  // Initialize dashboard
  async function initDashboard(): Promise<void> {
    updateTimestamp();
    await fetchAllData();
    setupEventListeners();
  }

  // Fetch all data at once
  async function fetchAllData(): Promise<void> {
    if (isRefreshing) return;
    
    setRefreshingState(true);
    
    try {
      await Promise.all([
        fetchMarketData(),
        fetchFearGreedIndex(),
        fetchExchangeRates(),
        fetchUSDMYRRate()
      ]);
      
      showNotification('Data updated successfully', 'success');
    } catch (error) {
      console.error('Failed to fetch data:', error);
      showNotification('Failed to update some data', 'warning');
    } finally {
      setRefreshingState(false);
    }
  }

  // Fetch market data from CoinGecko
  async function fetchMarketData(): Promise<void> {
    try {
      const response = await fetch(
        `${API_CONFIG.coingecko}/simple/price?ids=bitcoin&vs_currencies=usd,myr&include_market_cap=true&include_24hr_vol=true&include_24hr_change=true`
      );
      const data = await response.json();
      
      const bitcoin = data.bitcoin;
      const oldPriceUSD = currentPriceUSD;
      currentPriceUSD = bitcoin.usd;
      currentPriceMYR = bitcoin.myr || (currentPriceUSD * usdMyrRate);
      
      // Update USD price with animation
      const priceElementUSD = getElement('btc-price-usd');
      if (priceElementUSD) {
        priceElementUSD.textContent = `$${currentPriceUSD.toLocaleString()}`;
      }
      
      // Update MYR price
      const priceElementMYR = getElement('btc-price-myr');
      if (priceElementMYR) {
        priceElementMYR.textContent = `RM ${currentPriceMYR.toLocaleString()}`;
      }
      
      // Add flash effect for significant price changes
      if (oldPriceUSD !== 0 && Math.abs(currentPriceUSD - oldPriceUSD) > 50) {
        const flashClass = currentPriceUSD > oldPriceUSD ? 'price-up' : 'price-down';
        if (priceElementUSD) {
          priceElementUSD.classList.add(flashClass);
          setTimeout(() => priceElementUSD.classList.remove(flashClass), 1000);
        }
        if (priceElementMYR) {
          priceElementMYR.classList.add(flashClass);
          setTimeout(() => priceElementMYR.classList.remove(flashClass), 1000);
        }
      }
      
      // Update 24h change
      const change24h = bitcoin.usd_24h_change;
      const changeElement = getElement('price-change');
      if (changeElement) {
        changeElement.textContent = `${change24h > 0 ? '+' : ''}${change24h.toFixed(2)}%`;
        changeElement.className = `metric-value ${change24h > 0 ? 'profit' : 'loss'}`;
      }
      
      // Update market cap
      const marketCapElement = getElement('market-cap');
      if (marketCapElement) {
        marketCapElement.textContent = `$${(bitcoin.usd_market_cap / 1e9).toFixed(0)}B`;
      }
      
      // Update portfolio values
      updatePortfolioValues(currentPriceUSD, currentPriceMYR);
      
    } catch (error) {
      console.error('Error fetching market data:', error);
      // Try backup API
      await tryBackupPriceAPI();
    }
  }

  // Fetch USD/MYR exchange rate
  async function fetchUSDMYRRate(): Promise<void> {
    try {
      const response = await fetch(API_CONFIG.exchangerate);
      const data = await response.json();
      
      if (data.rates && data.rates.MYR) {
        usdMyrRate = data.rates.MYR;
        const rateElement = getElement('usd-myr-rate');
        if (rateElement) {
          rateElement.textContent = usdMyrRate.toFixed(2);
        }
        const updateElement = getElement('fx-last-update');
        if (updateElement) {
          updateElement.textContent = 'Just now';
        }
      }
    } catch (error) {
      console.error('Error fetching USD/MYR rate:', error);
      // Keep default rate
    }
  }

  // Try backup price API
  async function tryBackupPriceAPI(): Promise<void> {
    try {
      const response = await fetch(`${API_CONFIG.binance}/ticker/price?symbol=BTCUSDT`);
      const data = await response.json();
      
      if (data.price) {
        const price = parseFloat(data.price);
        currentPriceUSD = price;
        currentPriceMYR = price * usdMyrRate;
        
        const usdElement = getElement('btc-price-usd');
        if (usdElement) {
          usdElement.textContent = `$${price.toLocaleString()}`;
        }
        
        const myrElement = getElement('btc-price-myr');
        if (myrElement) {
          myrElement.textContent = `RM ${currentPriceMYR.toLocaleString()}`;
        }
        
        updatePortfolioValues(currentPriceUSD, currentPriceMYR);
      }
    } catch (error) {
      console.error('Backup API also failed:', error);
    }
  }

  // Fetch Fear & Greed Index
  async function fetchFearGreedIndex(): Promise<void> {
    try {
      const response = await fetch(`${API_CONFIG.feargreed}?limit=1`);
      const data = await response.json();
      
      const fng = data.data[0];
      const value = parseInt(fng.value);
      const classification = fng.value_classification;
      
      const fearGreedElement = getElement('fear-greed-value');
      if (fearGreedElement) {
        fearGreedElement.textContent = `${value} (${classification})`;
      }
      
      // Update sentiment bar
      const sentimentFill = getElement('sentiment-fill') as HTMLElement;
      if (sentimentFill && sentimentFill.style) {
        sentimentFill.style.left = `${value}%`;
      }
      
    } catch (error) {
      console.error('Error fetching Fear & Greed index:', error);
    }
  }

  // Fetch exchange rates
  async function fetchExchangeRates(): Promise<void> {
    try {
      const response = await fetch(
        `${API_CONFIG.coingecko}/simple/price?ids=bitcoin&vs_currencies=usd`
      );
      const data = await response.json();
      
      // Simulate different exchange rates with small variations
      const basePrice = data.bitcoin.usd;
      const exchanges = [
        { name: 'Coinbase Pro', priceUSD: basePrice + (Math.random() - 0.5) * 50 },
        { name: 'Binance', priceUSD: basePrice + (Math.random() - 0.5) * 50 },
        { name: 'Kraken', priceUSD: basePrice + (Math.random() - 0.5) * 50 }
      ];
      
      const exchangeContainer = getElement('exchange-rates');
      if (!exchangeContainer) return;
      
      // Update existing exchange items
      exchanges.forEach((exchange, index) => {
        const exchangeItems = exchangeContainer.querySelectorAll('.exchange-item');
        const exchangeItem = exchangeItems[index];
        if (exchangeItem) {
          const nameElement = exchangeItem.querySelector('.exchange-name');
          if (nameElement && nameElement.textContent === exchange.name) {
            const priceMYR = exchange.priceUSD * usdMyrRate;
            const usdPriceElement = exchangeItem.querySelector('.exchange-price-usd');
            const myrPriceElement = exchangeItem.querySelector('.exchange-price-myr');
            
            if (usdPriceElement) {
              usdPriceElement.textContent = `$${Math.round(exchange.priceUSD).toLocaleString()}`;
            }
            if (myrPriceElement) {
              myrPriceElement.textContent = `RM ${Math.round(priceMYR).toLocaleString()}`;
            }
          }
        }
      });
      
    } catch (error) {
      console.error('Error fetching exchange rates:', error);
    }
  }

  // Update portfolio values
  function updatePortfolioValues(priceUSD: number, priceMYR: number): void {
    const totalValueUSD = PORTFOLIO.totalBTC * priceUSD;
    const totalValueMYR = PORTFOLIO.totalBTC * priceMYR;
    const unrealizedPnL = totalValueUSD - (PORTFOLIO.totalBTC * PORTFOLIO.avgCostBasis);
    
    const usdValueElement = getElement('usd-value');
    if (usdValueElement) {
      usdValueElement.textContent = `$${totalValueUSD.toLocaleString()}`;
    }
    
    const myrValueElement = getElement('myr-value');
    if (myrValueElement) {
      myrValueElement.textContent = `RM ${totalValueMYR.toLocaleString()}`;
    }
    
    const pnlElement = getElement('unrealized-pnl');
    if (pnlElement) {
      pnlElement.textContent = `${unrealizedPnL > 0 ? '+' : ''}$${unrealizedPnL.toLocaleString()}`;
      pnlElement.className = `metric-value ${unrealizedPnL > 0 ? 'profit' : 'loss'}`;
    }
    
    // Update individual holdings
    const coldStorageUSD = getElement('cold-storage-usd');
    if (coldStorageUSD) {
      coldStorageUSD.textContent = `$${(PORTFOLIO.holdings.coldStorage * priceUSD).toLocaleString()}`;
    }
    
    const coldStorageMYR = getElement('cold-storage-myr');
    if (coldStorageMYR) {
      coldStorageMYR.textContent = `RM ${(PORTFOLIO.holdings.coldStorage * priceMYR).toLocaleString()}`;
    }
    
    const lightningUSD = getElement('lightning-usd');
    if (lightningUSD) {
      lightningUSD.textContent = `$${(PORTFOLIO.holdings.lightning * priceUSD).toLocaleString()}`;
    }
    
    const lightningMYR = getElement('lightning-myr');
    if (lightningMYR) {
      lightningMYR.textContent = `RM ${(PORTFOLIO.holdings.lightning * priceMYR).toLocaleString()}`;
    }
    
    const hotWalletUSD = getElement('hot-wallet-usd');
    if (hotWalletUSD) {
      hotWalletUSD.textContent = `$${(PORTFOLIO.holdings.hotWallet * priceUSD).toLocaleString()}`;
    }
    
    const hotWalletMYR = getElement('hot-wallet-myr');
    if (hotWalletMYR) {
      hotWalletMYR.textContent = `RM ${(PORTFOLIO.holdings.hotWallet * priceMYR).toLocaleString()}`;
    }
  }

  // Set refreshing state
  function setRefreshingState(refreshing: boolean): void {
    isRefreshing = refreshing;
    const refreshBtn = getElement('refresh-btn') as HTMLButtonElement;
    
    if (refreshBtn) {
      if (refreshing) {
        refreshBtn.classList.add('refreshing');
        refreshBtn.textContent = 'Refreshing...';
        refreshBtn.disabled = true;
      } else {
        refreshBtn.classList.remove('refreshing');
        refreshBtn.textContent = 'üîÑ Refresh Data';
        refreshBtn.disabled = false;
      }
    }
  }

  // Update timestamp
  function updateTimestamp(): void {
    const lastUpdateElement = getElement('last-update');
    if (lastUpdateElement) {
      lastUpdateElement.textContent = new Date().toLocaleString();
    }
  }

  // Setup event listeners
  function setupEventListeners(): void {
    // Refresh button
    const refreshBtn = getElement('refresh-btn');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', async () => {
        await fetchAllData();
        updateTimestamp();
      });
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'r') {
        e.preventDefault();
        const refreshBtn = getElement('refresh-btn') as HTMLButtonElement;
        if (refreshBtn) {
          refreshBtn.click();
        }
      }
    });

    // Auto-refresh every 5 minutes (optional)
    setInterval(async () => {
      await fetchAllData();
      updateTimestamp();
    }, 300000); // 5 minutes

    // Animate holding bars on load
    setTimeout(() => {
      const bars = document.querySelectorAll('.holding-fill');
      bars.forEach(bar => {
        const htmlBar = bar as HTMLElement;
        if (htmlBar.style) {
          const width = htmlBar.style.width;
          htmlBar.style.width = '0%';
          setTimeout(() => {
            htmlBar.style.width = width;
          }, 100);
        }
      });
    }, 500);
  }

  // Show notification
  function showNotification(message: string, type: string): void {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    Object.assign(notification.style, {
      position: 'fixed',
      top: '20px',
      right: '20px',
      padding: '1rem',
      borderRadius: '8px',
      color: 'white',
      backgroundColor: type === 'success' ? '#10b981' : type === 'warning' ? '#f59e0b' : '#3b82f6',
      zIndex: '1000',
      boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
      maxWidth: '300px',
      fontSize: '0.9rem'
    });
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }

  // Initialize when page loads
  document.addEventListener('DOMContentLoaded', initDashboard);

  // Debug functions
  declare global {
    interface Window {
      dashboardDebug: {
        fetchAllData: () => Promise<void>;
        currentPriceUSD: () => number;
        currentPriceMYR: () => number;
        usdMyrRate: () => number;
        refreshData: () => void;
      };
    }
  }

  window.dashboardDebug = {
    fetchAllData,
    currentPriceUSD: () => currentPriceUSD,
    currentPriceMYR: () => currentPriceMYR,
    usdMyrRate: () => usdMyrRate,
    refreshData: () => {
      const refreshBtn = getElement('refresh-btn') as HTMLButtonElement;
      if (refreshBtn) {
        refreshBtn.click();
      }
    }
  };
</script>